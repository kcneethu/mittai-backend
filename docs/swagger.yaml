definitions:
  models.Address:
    properties:
      addressID:
        type: integer
      addressLine1:
        type: string
      addressLine2:
        type: string
      city:
        type: string
      state:
        type: string
      userID:
        type: integer
      zipCode:
        type: string
    type: object
  models.CartItem:
    properties:
      created_at:
        type: string
      product:
        $ref: '#/definitions/models.ProductWeight'
      quantity:
        type: integer
      updated_at:
        type: string
    type: object
  models.ContactNumberRequest:
    properties:
      contact_number:
        type: string
    type: object
  models.EmailCheckResponse:
    properties:
      exists:
        type: boolean
    type: object
  models.MobileCheckResponse:
    properties:
      exists:
        type: boolean
      message:
        description: Optional message, e.g., for errors or status updates
        type: string
      userID:
        description: UserID is included only if Exists is true
        type: string
    type: object
  models.Product:
    properties:
      category:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      image_urls:
        items:
          type: string
        type: array
      ingredients:
        type: string
      name:
        type: string
      nutritional_info:
        type: string
      updated_at:
        type: string
      weights:
        items:
          $ref: '#/definitions/models.ProductWeight'
        type: array
    type: object
  models.ProductWeight:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      measurement:
        type: string
      price:
        type: number
      productID:
        type: integer
      stockAvailability:
        type: integer
      weight:
        type: integer
    type: object
  models.Purchase:
    properties:
      address_id:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      items:
        items:
          $ref: '#/definitions/models.PurchaseItem'
        type: array
      payment_id:
        type: integer
      total_price:
        type: number
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.PurchaseItem:
    properties:
      measurement:
        type: string
      product_id:
        type: integer
      product_name:
        type: string
      product_price:
        type: number
      product_weight_id:
        type: integer
      quantity:
        type: integer
      total_price:
        type: number
      weight:
        type: number
    type: object
  models.PurchaseItemRequest:
    properties:
      product_id:
        type: integer
      product_weight_id:
        type: integer
      quantity:
        type: integer
    type: object
  models.PurchaseRequest:
    properties:
      address_id:
        type: integer
      payment_id:
        type: integer
      purchase_items:
        items:
          $ref: '#/definitions/models.PurchaseItemRequest'
        type: array
      user_id:
        type: integer
    type: object
  models.User:
    properties:
      address:
        items:
          $ref: '#/definitions/models.Address'
        type: array
      contactNumber:
        type: string
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      password:
        type: string
      userID:
        type: integer
      verifiedAccount:
        type: boolean
    type: object
  models.UserCreationRequest:
    properties:
      contactNumber:
        type: string
      firstName:
        type: string
      lastName:
        type: string
    type: object
  models.UserCreationResponse:
    properties:
      userID:
        type: string
    type: object
  models.VerifyOTPRequest:
    properties:
      otp:
        type: string
    type: object
  models.Wishlist:
    properties:
      created_at:
        type: string
      id:
        type: integer
      product_id:
        type: integer
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.WishlistRequest:
    properties:
      product_id:
        type: integer
      user_id:
        type: integer
    type: object
  services.AddProductRequest:
    properties:
      category:
        type: string
      description:
        type: string
      image_urls:
        items:
          type: string
        type: array
      ingredients:
        type: string
      name:
        type: string
      nutritional_info:
        type: string
    type: object
  services.AddProductResponse:
    properties:
      message:
        type: string
      product_id:
        type: integer
    type: object
  services.AddProductWeightRequest:
    properties:
      measurement:
        type: string
      price:
        type: number
      stock:
        type: integer
      weight:
        type: integer
    type: object
  services.AddToCartRequest:
    properties:
      product_weight_id:
        type: integer
      quantity:
        type: integer
      user_id:
        type: integer
    type: object
  services.ClearCartRequest:
    properties:
      user_id:
        type: integer
    type: object
  services.CreateAddressResponse:
    properties:
      address_id:
        type: integer
    type: object
  services.EmailCheckRequest:
    properties:
      email:
        type: string
    type: object
  services.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  services.GetCartResponse:
    properties:
      cart_items:
        items:
          $ref: '#/definitions/models.CartItem'
        type: array
      total_price:
        type: number
    type: object
  services.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  services.LoginResponse:
    properties:
      user_id:
        type: integer
    type: object
  services.RemoveCartItemRequest:
    properties:
      product_weight_id:
        type: integer
      user_id:
        type: integer
    type: object
  services.SuccessResponse:
    properties:
      message:
        type: string
      product_id:
        type: integer
    type: object
  services.UpdateCartItemRequest:
    properties:
      product_weight_id:
        type: integer
      quantity:
        type: integer
      user_id:
        type: integer
    type: object
  services.UpdateProductWeightRequest:
    properties:
      measurement:
        type: string
      price:
        type: number
      stock:
        type: integer
      weight:
        type: integer
    type: object
info:
  contact: {}
paths:
  /addresses:
    post:
      consumes:
      - application/json
      parameters:
      - description: Address object
        in: body
        name: address
        required: true
        schema:
          $ref: '#/definitions/models.Address'
      produces:
      - application/json
      responses:
        "200":
          description: Address created successfully
          schema:
            $ref: '#/definitions/services.CreateAddressResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/services.ErrorResponse'
        "500":
          description: Failed to create address
          schema:
            $ref: '#/definitions/services.ErrorResponse'
      summary: Create a new address
      tags:
      - Addresses
  /addresses/{id}:
    delete:
      parameters:
      - description: Address ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Address deleted successfully
          schema:
            type: string
        "500":
          description: Failed to delete address
          schema:
            $ref: '#/definitions/services.ErrorResponse'
      summary: Delete an address
      tags:
      - Addresses
    get:
      consumes:
      - application/json
      parameters:
      - description: Address ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Address retrieved successfully
          schema:
            $ref: '#/definitions/models.Address'
        "500":
          description: Failed to retrieve address
          schema:
            $ref: '#/definitions/services.ErrorResponse'
      summary: Retrieve an address by ID
      tags:
      - Addresses
    put:
      consumes:
      - application/json
      parameters:
      - description: Address ID
        in: path
        name: id
        required: true
        type: string
      - description: Address object
        in: body
        name: address
        required: true
        schema:
          $ref: '#/definitions/models.Address'
      produces:
      - application/json
      responses:
        "200":
          description: Address updated successfully
          schema:
            type: string
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/services.ErrorResponse'
        "500":
          description: Failed to update address
          schema:
            $ref: '#/definitions/services.ErrorResponse'
      summary: Update an address
      tags:
      - Addresses
  /all_purchases:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: Purchases retrieved successfully
          schema:
            items:
              $ref: '#/definitions/models.Purchase'
            type: array
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/services.ErrorResponse'
        "500":
          description: Failed to fetch purchases
          schema:
            $ref: '#/definitions/services.ErrorResponse'
      summary: Get purchases list
      tags:
      - Purchases
  /cart:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Remove cart item request payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.RemoveCartItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Cart item removed successfully
          schema:
            $ref: '#/definitions/services.ErrorResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/services.ErrorResponse'
        "500":
          description: Failed to remove cart item
          schema:
            $ref: '#/definitions/services.ErrorResponse'
      summary: Remove a cart item
      tags:
      - Cart
    post:
      consumes:
      - application/json
      parameters:
      - description: Add to cart request payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.AddToCartRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Product added to cart successfully
          schema:
            $ref: '#/definitions/services.ErrorResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/services.ErrorResponse'
        "500":
          description: Failed to add product to cart
          schema:
            $ref: '#/definitions/services.ErrorResponse'
      summary: Add a product to the cart
      tags:
      - Cart
    put:
      consumes:
      - application/json
      parameters:
      - description: Update cart item request payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.UpdateCartItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Cart item updated successfully
          schema:
            $ref: '#/definitions/services.ErrorResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/services.ErrorResponse'
        "500":
          description: Failed to update cart item
          schema:
            $ref: '#/definitions/services.ErrorResponse'
      summary: Update the quantity of a cart item
      tags:
      - Cart
  /cart/{userID}:
    get:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User's cart retrieved successfully
          schema:
            $ref: '#/definitions/services.GetCartResponse'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/services.ErrorResponse'
        "500":
          description: Failed to fetch cart
          schema:
            $ref: '#/definitions/services.ErrorResponse'
      summary: Get the user's cart by user ID
      tags:
      - Cart
  /cart/clear:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Clear cart request payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.ClearCartRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Cart cleared successfully
          schema:
            $ref: '#/definitions/services.ErrorResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/services.ErrorResponse'
        "500":
          description: Failed to clear cart
          schema:
            $ref: '#/definitions/services.ErrorResponse'
      summary: Clear the cart
      tags:
      - Cart
  /login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Login request object
        in: body
        name: loginReq
        required: true
        schema:
          $ref: '#/definitions/services.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/services.LoginResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/services.ErrorResponse'
        "401":
          description: Invalid email or password
          schema:
            $ref: '#/definitions/services.ErrorResponse'
      summary: User login
      tags:
      - Users
  /orderstatus/{purchaseID}:
    get:
      parameters:
      - description: Purchase ID
        in: path
        name: purchaseID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Order status retrieved successfully
          schema:
            type: string
        "400":
          description: Bad request
        "500":
          description: Failed to fetch order status
      summary: Get the status of an order by purchase ID
      tags:
      - OrderStatus
    put:
      consumes:
      - application/json
      parameters:
      - description: Purchase ID
        in: path
        name: purchaseID
        required: true
        type: integer
      - description: New order status
        in: query
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Order status updated successfully
          schema:
            type: string
        "400":
          description: Bad request
        "500":
          description: Failed to update order status
      summary: Update the status of an order by purchase ID
      tags:
      - OrderStatus
  /products:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: List of products
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
        "500":
          description: Failed to retrieve products
      summary: List all products
      tags:
      - Products
    post:
      consumes:
      - application/json
      parameters:
      - description: Product details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/services.AddProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Product added successfully
          schema:
            $ref: '#/definitions/services.AddProductResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/services.ErrorResponse'
        "500":
          description: Failed to add product
          schema:
            $ref: '#/definitions/services.ErrorResponse'
      summary: Add a new product to the inventory
      tags:
      - Products
  /products/{id}:
    delete:
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Product deleted successfully
        "500":
          description: Failed to delete product
      summary: Delete a product from the inventory
      tags:
      - Products
    get:
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product details
          schema:
            $ref: '#/definitions/models.Product'
        "500":
          description: Failed to retrieve product details
      summary: Get product details by ID
      tags:
      - Products
    put:
      consumes:
      - multipart/form-data
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Product name
        in: formData
        name: name
        required: true
        type: string
      - description: Product description
        in: formData
        name: description
        required: true
        type: string
      - description: Product category
        in: formData
        name: category
        required: true
        type: string
      - description: Product ingredients
        in: formData
        name: ingredients
        required: true
        type: string
      - description: Product nutritional information
        in: formData
        name: nutritional_info
        required: true
        type: string
      - description: Product image URLs (comma-separated)
        in: formData
        name: image_urls
        required: true
        type: string
      responses:
        "200":
          description: Product updated successfully
        "400":
          description: Invalid form data
        "500":
          description: Failed to update product
      summary: Update an existing product in the inventory
      tags:
      - Products
  /productweight/{productID}/weights:
    post:
      parameters:
      - description: Product ID
        in: path
        name: productID
        required: true
        type: string
      - description: Product weight details
        in: body
        name: weight
        required: true
        schema:
          $ref: '#/definitions/services.AddProductWeightRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Weight added successfully
          schema:
            $ref: '#/definitions/services.SuccessResponse'
        "400":
          description: Invalid request body or product ID
          schema:
            $ref: '#/definitions/services.ErrorResponse'
        "500":
          description: Failed to add weight
          schema:
            $ref: '#/definitions/services.ErrorResponse'
      summary: Add a new weight variant for a product
      tags:
      - Product Weights
  /productweight/{productID}/weights/{weightID}:
    put:
      parameters:
      - description: Product ID
        in: path
        name: productID
        required: true
        type: string
      - description: Weight ID
        in: path
        name: weightID
        required: true
        type: string
      - description: Product weight details
        in: body
        name: weight
        required: true
        schema:
          $ref: '#/definitions/services.UpdateProductWeightRequest'
      responses:
        "200":
          description: Weight updated successfully
        "400":
          description: Invalid request body or product/weight ID
        "500":
          description: Failed to update weight
      summary: Update an existing weight variant for a product
      tags:
      - Product Weights
  /productweight/weights/{weightID}:
    get:
      parameters:
      - description: Weight ID
        in: path
        name: weightID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully fetched weight details
          schema:
            $ref: '#/definitions/models.ProductWeight'
        "400":
          description: Invalid weight ID
        "500":
          description: Failed to fetch weight details
      summary: Fetch product weight details based on product_weight_id
      tags:
      - Product Weights
  /purchase:
    post:
      consumes:
      - application/json
      parameters:
      - description: Purchase payload
        in: body
        name: purchase
        required: true
        schema:
          $ref: '#/definitions/models.PurchaseRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Purchase created successfully
          schema:
            type: string
        "400":
          description: Bad request
        "500":
          description: Failed to create purchase
      summary: Create a new purchase
      tags:
      - Purchases
  /purchase/{userID}:
    get:
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Purchases retrieved successfully
          schema:
            items:
              $ref: '#/definitions/models.Purchase'
            type: array
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/services.ErrorResponse'
        "500":
          description: Failed to fetch purchases
          schema:
            $ref: '#/definitions/services.ErrorResponse'
      summary: Get purchases by user ID
      tags:
      - Purchases
  /purchaseDetails/{PurchaseId}:
    get:
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Purchases retrieved successfully
          schema:
            items:
              $ref: '#/definitions/models.Purchase'
            type: array
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/services.ErrorResponse'
        "500":
          description: Failed to fetch purchases
          schema:
            $ref: '#/definitions/services.ErrorResponse'
      summary: Get purchases by user ID
      tags:
      - Purchases
  /users:
    post:
      consumes:
      - application/json
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: User created successfully
          schema:
            type: string
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/services.ErrorResponse'
        "409":
          description: Contact number already exists
          schema:
            $ref: '#/definitions/services.ErrorResponse'
        "500":
          description: Failed to create user
          schema:
            $ref: '#/definitions/services.ErrorResponse'
      summary: Create a new user
      tags:
      - Users
  /users/{id}:
    delete:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: User deleted successfully
          schema:
            type: string
        "500":
          description: Failed to delete user
          schema:
            $ref: '#/definitions/services.ErrorResponse'
      summary: Delete a user
      tags:
      - Users
    get:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User retrieved successfully
          schema:
            $ref: '#/definitions/models.User'
        "500":
          description: Failed to retrieve user
          schema:
            $ref: '#/definitions/services.ErrorResponse'
      summary: Retrieve a user by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            type: string
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/services.ErrorResponse'
        "500":
          description: Failed to update user
          schema:
            $ref: '#/definitions/services.ErrorResponse'
      summary: Update a user
      tags:
      - Users
  /users/{id}/name:
    get:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User name retrieved successfully
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/services.ErrorResponse'
        "500":
          description: Failed to retrieve user name
          schema:
            $ref: '#/definitions/services.ErrorResponse'
      summary: Retrieve the first and last name of a user by ID
      tags:
      - Users
  /users/{user_id}/addresses:
    get:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Addresses retrieved successfully
          schema:
            items:
              $ref: '#/definitions/models.Address'
            type: array
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/services.ErrorResponse'
        "500":
          description: Failed to get addresses
          schema:
            $ref: '#/definitions/services.ErrorResponse'
      summary: Fetch all addresses for a given user ID
      tags:
      - Addresses
  /users/check-email:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body containing email
        in: body
        name: emailCheckRequest
        required: true
        schema:
          $ref: '#/definitions/services.EmailCheckRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Email existence response
          schema:
            $ref: '#/definitions/models.EmailCheckResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/services.ErrorResponse'
      summary: Check if an email ID exists
      tags:
      - Users
  /users/check-mobile:
    post:
      consumes:
      - application/json
      description: Checks if a given mobile number exists in the database and returns
        a response indicating the existence.
      parameters:
      - description: Request body containing the contact number to check
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ContactNumberRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Mobile number check response indicating whether the mobile
            number exists along with the user ID if it does.
          schema:
            $ref: '#/definitions/models.MobileCheckResponse'
        "400":
          description: Invalid request - JSON body is required and must contain a
            'contact_number'.
          schema:
            $ref: '#/definitions/services.ErrorResponse'
        "500":
          description: Internal server error - Failed to check mobile number due to
            a server error.
          schema:
            $ref: '#/definitions/services.ErrorResponse'
      summary: Check if a mobile number exists
      tags:
      - Users
  /users/create:
    post:
      consumes:
      - application/json
      parameters:
      - description: User creation request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserCreationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User creation response
          schema:
            $ref: '#/definitions/models.UserCreationResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/services.ErrorResponse'
        "409":
          description: Contact number already exists
          schema:
            $ref: '#/definitions/services.ErrorResponse'
      summary: Create a new user with first name, last name, and contact number
      tags:
      - Users
  /verify-otp/{id}:
    post:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: OTP object
        in: body
        name: otp
        required: true
        schema:
          $ref: '#/definitions/models.VerifyOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OTP verified and account updated successfully
          schema:
            type: string
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/services.ErrorResponse'
        "401":
          description: Invalid OTP
          schema:
            type: string
        "500":
          description: Failed to update user
          schema:
            $ref: '#/definitions/services.ErrorResponse'
      summary: Verify OTP and update verified_account
      tags:
      - Users
  /wishlist:
    post:
      consumes:
      - application/json
      parameters:
      - description: Wishlist item
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/models.WishlistRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Item added successfully
          schema:
            additionalProperties:
              type: integer
            type: object
        "400":
          description: Bad request
        "500":
          description: Failed to add item to wishlist
      summary: Add an item to the wishlist
      tags:
      - Wishlist
  /wishlist/{user_id}:
    get:
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Wishlist items retrieved successfully
          schema:
            items:
              $ref: '#/definitions/models.Wishlist'
            type: array
        "400":
          description: Bad request
        "500":
          description: Failed to fetch wishlist items
      summary: Get all wishlist items for a user
      tags:
      - Wishlist
  /wishlist/{user_id}/{product_id}:
    delete:
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Item removed successfully
          schema:
            type: string
        "400":
          description: Bad request
        "500":
          description: Failed to remove item from wishlist
      summary: Remove an item from the wishlist
      tags:
      - Wishlist
  /wishlist/check/{user_id}/{product_id}:
    get:
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Item exists in the wishlist
          schema:
            additionalProperties:
              type: boolean
            type: object
        "400":
          description: Bad request
        "500":
          description: Failed to check item in wishlist
      summary: Check if an item exists in the wishlist
      tags:
      - Wishlist
  /payment/modes:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: List of payment methods
          schema:
            items:
              $ref: '#/definitions/models.PaymentMode'
            type: array
        "500":
          description: Failed to retrieve payment methods
      summary: List all payment methods
      tags:
      - payment_methods
swagger: "2.0"
